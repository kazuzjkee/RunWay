import React, { useState } from 'react';
import Header from '../components/Header';
import Footer from '../components/Footer';
import PhoneInput from 'react-phone-number-input';
import 'react-phone-number-input/style.css';
import '../styles/CheckoutPage.css';
import { useNavigate } from 'react-router-dom';

const CheckoutPage = () => {
  const [cart] = useState(() => {
    return JSON.parse(localStorage.getItem('cart')) || [];
  });

  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    address: '',
    comment: '',
  });

  const navigate = useNavigate();

  const totalPrice = cart.reduce((sum, item) => sum + item.price, 0);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handlePhoneChange = (value) => {
    setFormData({ ...formData, phone: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const order = {
      id: Date.now(),
      date: new Date().toLocaleString(),
      items: cart,
      total: totalPrice,
      customer: formData,
    };

    const TELEGRAM_BOT_TOKEN = process.env.REACT_APP_TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.REACT_APP_CHAT_ID;
    
    const messageText = `
üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

ID: ${order.id}
–î–∞—Ç–∞: ${order.date}

–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:
–ò–º—è: ${order.customer.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}
–ê–¥—Ä–µ—Å: ${order.customer.address}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.customer.comment}

–¢–æ–≤–∞—Ä—ã:
${order.items.map(item => `- ${item.title} (${item.size}), ${item.price} ‚ÇΩ`).join('\n')}

–ò—Ç–æ–≥–æ: ${order.total} ‚ÇΩ
    `;

    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,  {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: messageText,
            }),
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API');
        }

        navigate('/thankyou', { state: { order } });

        localStorage.removeItem('cart'); 
        setFormData({ name: '', phone: '', address: '', comment: '' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  return (
    <div className="checkout-page">
      <Header />
      <main className="checkout-container">
        <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>–ò–º—è:</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
            />
          </div>

          <div className="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
            <PhoneInput
              defaultCountry="RU"
              value={formData.phone}
              onChange={handlePhoneChange}
              name="phone"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
              international
              countryCallingCodeEditable={false}
              style={{ width: '100%' }}
            />
          </div>

          <div className="form-group">
            <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
            <textarea
              name="address"
              value={formData.address}
              onChange={handleChange}
              required
            />
          </div>

          <div className="form-group">
            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</label>
            <textarea
              name="comment"
              value={formData.comment}
              onChange={handleChange}
            />
          </div>

          <h3 className="price">–ò—Ç–æ–≥–æ: {totalPrice} ‚ÇΩ</h3>
          <button type="submit" className="submit-btn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑</button>
        </form>
      </main>
      <Footer />
    </div>
  );
};

export default CheckoutPage;